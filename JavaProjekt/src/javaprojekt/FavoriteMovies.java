/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaprojekt;

import Dal.Sql.FavoriteMoviesDataFactory;
import Dal.Sql.MoviesDataFactory;
import Model.FavoriteMovie;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;

/**
 *
 * @author Fran
 */
public class FavoriteMovies extends javax.swing.JPanel {
    private final DefaultListModel<String> destinationModel = new DefaultListModel<>();
    FavoriteMoviesDataFactory fmf=new FavoriteMoviesDataFactory();
    /**
     * Creates new form FavoriteMovies
     */
    public FavoriteMovies() {
        initComponents();
        initLists();
        initDragNDrop();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listFavoriteMovies = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        listAllMovies = new javax.swing.JList();
        btnSaveFavorites = new javax.swing.JButton();
        btnDeleteSelectedMovie = new javax.swing.JButton();

        jLabel1.setText("Drag and drop to the right side");

        jLabel2.setText("Favorite movies");

        listFavoriteMovies.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listFavoriteMovies);

        listAllMovies.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listAllMovies);

        btnSaveFavorites.setText("Save favorites!");
        btnSaveFavorites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveFavoritesActionPerformed(evt);
            }
        });

        btnDeleteSelectedMovie.setText("Delete selected movie");
        btnDeleteSelectedMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSelectedMovieActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnSaveFavorites, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDeleteSelectedMovie, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(269, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSaveFavorites)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteSelectedMovie)
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(33, 33, 33)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                    .addGap(21, 21, 21)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveFavoritesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveFavoritesActionPerformed
        if(listFavoriteMovies.size().toString().equals("0"))
        {
            JOptionPane.showMessageDialog(null, "The list is empty.");
        }
        else
        {
           List<FavoriteMovie> list = new ArrayList(listFavoriteMovies.getModel().getSize());
           for (int i = 0; i < listFavoriteMovies.getModel().getSize(); i++) {
           FavoriteMovie movie=new FavoriteMovie();
           String title= (String) listFavoriteMovies.getModel().getElementAt(i);
           
           movie.setTitle(title);
           list.add(movie);
               
           }
           fmf.SaveFavoriteMovies(list);
        }
    }//GEN-LAST:event_btnSaveFavoritesActionPerformed

    private void btnDeleteSelectedMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSelectedMovieActionPerformed
        try{
        fmf.DeleteSelectedMovieFromTheDatabase(listFavoriteMovies.getSelectedValue().toString());
            
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"No movie selected");
        }
    }//GEN-LAST:event_btnDeleteSelectedMovieActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteSelectedMovie;
    private javax.swing.JButton btnSaveFavorites;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listAllMovies;
    private javax.swing.JList listFavoriteMovies;
    // End of variables declaration//GEN-END:variables
private void initLists() {
        DefaultListModel<String> sourceModel = new DefaultListModel<>();
        MoviesDataFactory mf=new MoviesDataFactory();
        mf.GetMoviesFromDatabase().forEach(e -> sourceModel.addElement(e.getTitle()));
        listAllMovies.setModel(sourceModel);
        listFavoriteMovies.setModel(destinationModel);


    }

    private void initDragNDrop() {
        listAllMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listAllMovies.setDragEnabled(true);
        listAllMovies.setTransferHandler(new ExportTransferHandler());

        listFavoriteMovies.setDropMode(DropMode.ON);
        listFavoriteMovies.setTransferHandler(new ImportTransferHandler());
      
    }

  

   

    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            // defines icon shown in target before drop
            return COPY;
            //return MOVE;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new StringSelection((String) listAllMovies.getSelectedValue());
        }
    }

    private class ImportTransferHandler extends TransferHandler {

        // we define whether we can import stringFlavor that we need for JList<String>
        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(DataFlavor.stringFlavor);
        }

        // we import the data
        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                String data = (String) transferable.getTransferData(DataFlavor.stringFlavor);
                DefaultListModel<String> sourceModel2 = new DefaultListModel<>();
                DefaultListModel<String> sourceModel3 = sourceModel2;
                fmf.GetMoviesFromDatabase().forEach(e -> sourceModel2.addElement(e.getTitle()));
                listFavoriteMovies.setModel(sourceModel2);

                if (!sourceModel2.contains(data)) {
                    sourceModel2.addElement(data);
                    listFavoriteMovies.setModel(sourceModel3);
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                
            }
            return false;
        }

        private void FillDatabase() {
             List<FavoriteMovie> list = new ArrayList(listFavoriteMovies.getModel().getSize());
                    for (int i = 0; i < listFavoriteMovies.getModel().getSize(); i++) {
                    FavoriteMovie movie=new FavoriteMovie();
                    String title= (String) listFavoriteMovies.getModel().getElementAt(i);

                    movie.setTitle(title);
                    list.add(movie);
                    }
                    fmf.SaveFavoriteMovies(list);
        }
    }

}
